
Basic_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b0c  08003b0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b14  08003b14  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08003b8c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003b8c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcfb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6f  00000000  00000000  0002dd9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002f810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  000304c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e84  00000000  00000000  000310c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e327  00000000  00000000  00052f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4981  00000000  00000000  00061273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135bf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000392c  00000000  00000000  00135c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a54 	.word	0x08003a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003a54 	.word	0x08003a54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fae9 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f85f 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f907 	bl	80007a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8d5 	bl	8000744 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800059a:	f000 f8ab 	bl	80006f4 <MX_TIM16_Init>
  /* USER CODE BEGIN WHILE */

  uint16_t timer_val;
  uint8_t buf[32];

  HAL_TIM_Base_Start(&htim16);
 800059e:	4826      	ldr	r0, [pc, #152]	; (8000638 <main+0xb4>)
 80005a0:	f002 f81c 	bl	80025dc <HAL_TIM_Base_Start>
  timer_val=__HAL_TIM_GET_COUNTER(&htim16);
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <main+0xb4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//a
 80005ac:	2201      	movs	r2, #1
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4822      	ldr	r0, [pc, #136]	; (800063c <main+0xb8>)
 80005b2:	f000 fdb1 	bl	8001118 <HAL_GPIO_WritePin>

  while (1)
  {


	  if(__HAL_TIM_GET_COUNTER(&htim16)-timer_val >= 500){
 80005b6:	4b20      	ldr	r3, [pc, #128]	; (8000638 <main+0xb4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005c4:	d3f7      	bcc.n	80005b6 <main+0x32>

	    sprintf(buf, "GET_COUNTER = %d\n", __HAL_TIM_GET_COUNTER(&htim16));
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <main+0xb4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	491c      	ldr	r1, [pc, #112]	; (8000640 <main+0xbc>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fdd1 	bl	8003178 <siprintf>
	    HAL_UART_Transmit(&huart2 ,buf,strlen((char*)buf), HAL_MAX_DELAY);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fdf9 	bl	80001d0 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	1d39      	adds	r1, r7, #4
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	4816      	ldr	r0, [pc, #88]	; (8000644 <main+0xc0>)
 80005ea:	f002 f8f5 	bl	80027d8 <HAL_UART_Transmit>



		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	4812      	ldr	r0, [pc, #72]	; (800063c <main+0xb8>)
 80005f2:	f000 fda9 	bl	8001148 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <main+0xc4>)
 80005fc:	f000 fda4 	bl	8001148 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8000600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <main+0xc4>)
 8000606:	f000 fd9f 	bl	8001148 <HAL_GPIO_TogglePin>
		  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <main+0xb4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	84fb      	strh	r3, [r7, #38]	; 0x26

	    	sprintf(buf, "Timer_val = %d\n", timer_val);
 8000612:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <main+0xc8>)
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fdad 	bl	8003178 <siprintf>
	    	HAL_UART_Transmit(&huart2 ,buf,strlen((char*)buf), HAL_MAX_DELAY);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fdd5 	bl	80001d0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <main+0xc0>)
 8000632:	f002 f8d1 	bl	80027d8 <HAL_UART_Transmit>
	  if(__HAL_TIM_GET_COUNTER(&htim16)-timer_val >= 500){
 8000636:	e7be      	b.n	80005b6 <main+0x32>
 8000638:	2000008c 	.word	0x2000008c
 800063c:	48000800 	.word	0x48000800
 8000640:	08003a6c 	.word	0x08003a6c
 8000644:	200000d8 	.word	0x200000d8
 8000648:	48000400 	.word	0x48000400
 800064c:	08003a80 	.word	0x08003a80

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fd82 	bl	8003168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000676:	f000 fd8f 	bl	8001198 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 f92e 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2310      	movs	r3, #16
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800069e:	230a      	movs	r3, #10
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fdc6 	bl	8001244 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006be:	f000 f90f 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f9c6 	bl	8001a6c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f8fb 	bl	80008e0 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_TIM16_Init+0x48>)
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_TIM16_Init+0x4c>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_TIM16_Init+0x48>)
 8000700:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000704:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_TIM16_Init+0x48>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_TIM16_Init+0x48>)
 800070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000712:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_TIM16_Init+0x48>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_TIM16_Init+0x48>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_TIM16_Init+0x48>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_TIM16_Init+0x48>)
 8000728:	f001 ff00 	bl	800252c <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000732:	f000 f8d5 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40014400 	.word	0x40014400

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f001 ffd8 	bl	800273c <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8a5 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000d8 	.word	0x200000d8
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a45      	ldr	r2, [pc, #276]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b43      	ldr	r3, [pc, #268]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	4b40      	ldr	r3, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a3f      	ldr	r2, [pc, #252]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a39      	ldr	r2, [pc, #228]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <MX_GPIO_Init+0x130>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a33      	ldr	r2, [pc, #204]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	21b0      	movs	r1, #176	; 0xb0
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fc79 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|LD4_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5111 	mov.w	r1, #9280	; 0x2440
 800082c:	482a      	ldr	r0, [pc, #168]	; (80008d8 <MX_GPIO_Init+0x134>)
 800082e:	f000 fc73 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	4829      	ldr	r0, [pc, #164]	; (80008dc <MX_GPIO_Init+0x138>)
 8000838:	f000 fc6e 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4822      	ldr	r0, [pc, #136]	; (80008dc <MX_GPIO_Init+0x138>)
 8000854:	f000 fae6 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000858:	23b0      	movs	r3, #176	; 0xb0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 fad7 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 faca 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 LD4_Pin PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|LD4_Pin|GPIO_PIN_6;
 8000890:	f44f 5311 	mov.w	r3, #9280	; 0x2440
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <MX_GPIO_Init+0x134>)
 80008aa:	f000 fabb 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_GPIO_Init+0x138>)
 80008c6:	f000 faad 	bl	8000e24 <HAL_GPIO_Init>

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000800 	.word	0x48000800

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_TIM_Base_MspInit+0x38>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10b      	bne.n	800095e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_TIM_Base_MspInit+0x3c>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <HAL_TIM_Base_MspInit+0x3c>)
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_TIM_Base_MspInit+0x3c>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40014400 	.word	0x40014400
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0a2      	sub	sp, #136	; 0x88
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2260      	movs	r2, #96	; 0x60
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fbe7 	bl	8003168 <memset>
  if(huart->Instance==USART2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <HAL_UART_MspInit+0xac>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d138      	bne.n	8000a16 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fa7f 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009bc:	f7ff ff90 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0xb0>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0xb0>)
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ca:	6593      	str	r3, [r2, #88]	; 0x58
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0xb0>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_UART_MspInit+0xb0>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xb0>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_UART_MspInit+0xb0>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f0:	230c      	movs	r3, #12
 80009f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f000 fa07 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3788      	adds	r7, #136	; 0x88
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f000 f8d0 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f002 fb32 	bl	8003114 <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20010000 	.word	0x20010000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	2000015c 	.word	0x2000015c
 8000ae4:	20000178 	.word	0x20000178

08000ae8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff ffea 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f002 faf1 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fd21 	bl	8000584 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b50:	08003b1c 	.word	0x08003b1c
  ldr r2, =_sbss
 8000b54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b58:	20000174 	.word	0x20000174

08000b5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_Init+0x3c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_Init+0x3c>)
 8000b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 f920 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f80f 	bl	8000ba0 <HAL_InitTick>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	e001      	b.n	8000b92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8e:	f7ff fead 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d023      	beq.n	8000bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_InitTick+0x70>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f91d 	bl	8000e0a <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10f      	bne.n	8000bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d809      	bhi.n	8000bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f000 f8f5 	bl	8000dd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_InitTick+0x74>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e007      	b.n	8000c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e004      	b.n	8000c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e001      	b.n	8000c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000160 	.word	0x20000160

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000160 	.word	0x20000160

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff47 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff5c 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff8e 	bl	8000d10 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5d 	bl	8000cbc <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffb0 	bl	8000d78 <SysTick_Config>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e154      	b.n	80010de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8146 	beq.w	80010d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80a0 	beq.w	80010d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b58      	ldr	r3, [pc, #352]	; (80010fc <HAL_GPIO_Init+0x2d8>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	4a57      	ldr	r2, [pc, #348]	; (80010fc <HAL_GPIO_Init+0x2d8>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa4:	4b55      	ldr	r3, [pc, #340]	; (80010fc <HAL_GPIO_Init+0x2d8>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb0:	4a53      	ldr	r2, [pc, #332]	; (8001100 <HAL_GPIO_Init+0x2dc>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fda:	d019      	beq.n	8001010 <HAL_GPIO_Init+0x1ec>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a49      	ldr	r2, [pc, #292]	; (8001104 <HAL_GPIO_Init+0x2e0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d013      	beq.n	800100c <HAL_GPIO_Init+0x1e8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1e4>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a47      	ldr	r2, [pc, #284]	; (800110c <HAL_GPIO_Init+0x2e8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1e0>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a46      	ldr	r2, [pc, #280]	; (8001110 <HAL_GPIO_Init+0x2ec>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1dc>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e008      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001000:	2307      	movs	r3, #7
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001004:	2303      	movs	r3, #3
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001010:	2300      	movs	r3, #0
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001022:	4937      	ldr	r1, [pc, #220]	; (8001100 <HAL_GPIO_Init+0x2dc>)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001030:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001054:	4a2f      	ldr	r2, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107e:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a8:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_GPIO_Init+0x2f0>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f aea3 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000
 8001104:	48000400 	.word	0x48000400
 8001108:	48000800 	.word	0x48000800
 800110c:	48000c00 	.word	0x48000c00
 8001110:	48001000 	.word	0x48001000
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43d9      	mvns	r1, r3
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	400b      	ands	r3, r1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_PWREx_GetVoltageRange+0x18>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40007000 	.word	0x40007000

08001198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a6:	d130      	bne.n	800120a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b4:	d038      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2232      	movs	r2, #50	; 0x32
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011dc:	e002      	b.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f0:	d102      	bne.n	80011f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f2      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001204:	d110      	bne.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e00f      	b.n	800122a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001216:	d007      	beq.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001220:	4a05      	ldr	r2, [pc, #20]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	f000 bc02 	b.w	8001a5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001258:	4b96      	ldr	r3, [pc, #600]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001262:	4b94      	ldr	r3, [pc, #592]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80e4 	beq.w	8001442 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_RCC_OscConfig+0x4c>
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	f040 808b 	bne.w	800139e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b01      	cmp	r3, #1
 800128c:	f040 8087 	bne.w	800139e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001290:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_OscConfig+0x64>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e3d9      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <HAL_RCC_OscConfig+0x7e>
 80012b8:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012c0:	e005      	b.n	80012ce <HAL_RCC_OscConfig+0x8a>
 80012c2:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d223      	bcs.n	800131a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fd8c 	bl	8001df4 <RCC_SetFlashLatencyFromMSIRange>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e3ba      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e6:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a72      	ldr	r2, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	496d      	ldr	r1, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4968      	ldr	r1, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e025      	b.n	8001366 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4960      	ldr	r1, [pc, #384]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	495b      	ldr	r1, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fd4c 	bl	8001df4 <RCC_SetFlashLatencyFromMSIRange>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e37a      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001366:	f000 fc81 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4950      	ldr	r1, [pc, #320]	; (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x278>)
 8001384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fc08 	bl	8000ba0 <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d052      	beq.n	8001440 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	e35e      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d032      	beq.n	800140c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a42      	ldr	r2, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc45 	bl	8000c40 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc41 	bl	8000c40 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e347      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a35      	ldr	r2, [pc, #212]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4930      	ldr	r1, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	492b      	ldr	r1, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
 800140a:	e01a      	b.n	8001442 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001418:	f7ff fc12 	bl	8000c40 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001420:	f7ff fc0e 	bl	8000c40 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e314      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1dc>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d073      	beq.n	8001536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x21c>
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d10e      	bne.n	8001478 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d063      	beq.n	8001534 <HAL_RCC_OscConfig+0x2f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d15f      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e2f1      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x24c>
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e025      	b.n	80014dc <HAL_RCC_OscConfig+0x298>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d114      	bne.n	80014c4 <HAL_RCC_OscConfig+0x280>
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a02      	ldr	r2, [pc, #8]	; (80014b4 <HAL_RCC_OscConfig+0x270>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e013      	b.n	80014dc <HAL_RCC_OscConfig+0x298>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	08003a90 	.word	0x08003a90
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004
 80014c4:	4ba0      	ldr	r3, [pc, #640]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a9f      	ldr	r2, [pc, #636]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b9d      	ldr	r3, [pc, #628]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a9c      	ldr	r2, [pc, #624]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fbac 	bl	8000c40 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fba8 	bl	8000c40 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e2ae      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x2a8>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fb98 	bl	8000c40 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fb94 	bl	8000c40 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e29a      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d0>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d060      	beq.n	8001604 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x310>
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d119      	bne.n	8001582 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d116      	bne.n	8001582 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b7c      	ldr	r3, [pc, #496]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x328>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e277      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4973      	ldr	r1, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e040      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d023      	beq.n	80015d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb53 	bl	8000c40 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fb4f 	bl	8000c40 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e255      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	495f      	ldr	r1, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5c      	ldr	r2, [pc, #368]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fb2f 	bl	8000c40 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb2b 	bl	8000c40 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e231      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d03c      	beq.n	800168a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01c      	beq.n	8001652 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800161a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161e:	4a4a      	ldr	r2, [pc, #296]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fb0a 	bl	8000c40 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fb06 	bl	8000c40 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e20c      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ef      	beq.n	8001630 <HAL_RCC_OscConfig+0x3ec>
 8001650:	e01b      	b.n	800168a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001658:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff faed 	bl	8000c40 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fae9 	bl	8000c40 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1ef      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ef      	bne.n	800166a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80a6 	beq.w	80017e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6593      	str	r3, [r2, #88]	; 0x58
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d118      	bne.n	8001702 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016dc:	f7ff fab0 	bl	8000c40 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e4:	f7ff faac 	bl	8000c40 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1b2      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_RCC_OscConfig+0x508>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_RCC_OscConfig+0x4d8>
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800171a:	e029      	b.n	8001770 <HAL_RCC_OscConfig+0x52c>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d115      	bne.n	8001750 <HAL_RCC_OscConfig+0x50c>
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_RCC_OscConfig+0x504>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001744:	e014      	b.n	8001770 <HAL_RCC_OscConfig+0x52c>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	4b9a      	ldr	r3, [pc, #616]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a99      	ldr	r2, [pc, #612]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	4b96      	ldr	r3, [pc, #600]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	4a95      	ldr	r2, [pc, #596]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d016      	beq.n	80017a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fa62 	bl	8000c40 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fa5e 	bl	8000c40 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e162      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001796:	4b89      	ldr	r3, [pc, #548]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ed      	beq.n	8001780 <HAL_RCC_OscConfig+0x53c>
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa4b 	bl	8000c40 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff fa47 	bl	8000c40 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e14b      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c4:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ed      	bne.n	80017ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d8:	4b78      	ldr	r3, [pc, #480]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03c      	beq.n	800186a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01c      	beq.n	8001832 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f8:	4b70      	ldr	r3, [pc, #448]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80017fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fe:	4a6f      	ldr	r2, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fa1a 	bl	8000c40 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001810:	f7ff fa16 	bl	8000c40 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e11c      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001822:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ef      	beq.n	8001810 <HAL_RCC_OscConfig+0x5cc>
 8001830:	e01b      	b.n	800186a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001832:	4b62      	ldr	r3, [pc, #392]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001838:	4a60      	ldr	r2, [pc, #384]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff f9fd 	bl	8000c40 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184a:	f7ff f9f9 	bl	8000c40 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0ff      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800185c:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800185e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ef      	bne.n	800184a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80f3 	beq.w	8001a5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	2b02      	cmp	r3, #2
 800187a:	f040 80c9 	bne.w	8001a10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	429a      	cmp	r2, r3
 8001890:	d12c      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	3b01      	subs	r3, #1
 800189e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d123      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d11b      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d113      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d109      	bne.n	80018ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	3b01      	subs	r3, #1
 80018e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d06b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d062      	beq.n	80019b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0ac      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001902:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190e:	f7ff f997 	bl	8000c40 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff f993 	bl	8000c40 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e099      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_OscConfig+0x77c>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001944:	3a01      	subs	r2, #1
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800194e:	0212      	lsls	r2, r2, #8
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001956:	0852      	lsrs	r2, r2, #1
 8001958:	3a01      	subs	r2, #1
 800195a:	0552      	lsls	r2, r2, #21
 800195c:	4311      	orrs	r1, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001962:	0852      	lsrs	r2, r2, #1
 8001964:	3a01      	subs	r2, #1
 8001966:	0652      	lsls	r2, r2, #25
 8001968:	4311      	orrs	r1, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800196e:	06d2      	lsls	r2, r2, #27
 8001970:	430a      	orrs	r2, r1
 8001972:	4912      	ldr	r1, [pc, #72]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001990:	f7ff f956 	bl	8000c40 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f952 	bl	8000c40 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e058      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_RCC_OscConfig+0x778>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b6:	e050      	b.n	8001a5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e04f      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d144      	bne.n	8001a5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e8:	f7ff f92a 	bl	8000c40 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f926 	bl	8000c40 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e02c      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x7ac>
 8001a0e:	e024      	b.n	8001a5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d01f      	beq.n	8001a56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff f90d 	bl	8000c40 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff f909 	bl	8000c40 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e00f      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4905      	ldr	r1, [pc, #20]	; (8001a64 <HAL_RCC_OscConfig+0x820>)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x824>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
 8001a54:	e001      	b.n	8001a5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	feeefffc 	.word	0xfeeefffc

08001a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0e7      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b75      	ldr	r3, [pc, #468]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4970      	ldr	r1, [pc, #448]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cf      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4960      	ldr	r1, [pc, #384]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d04c      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d121      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0a6      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e09a      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b22:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e08e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e086      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 0203 	bic.w	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4943      	ldr	r1, [pc, #268]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7ff f874 	bl	8000c40 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7ff f870 	bl	8000c40 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e06e      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 020c 	and.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1eb      	bne.n	8001b5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d010      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d208      	bcs.n	8001bb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	492b      	ldr	r1, [pc, #172]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d210      	bcs.n	8001be2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 0207 	bic.w	r2, r3, #7
 8001bc8:	4923      	ldr	r1, [pc, #140]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e036      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bee:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	4918      	ldr	r1, [pc, #96]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4910      	ldr	r1, [pc, #64]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c20:	f000 f824 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1f4>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1fc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe ffab 	bl	8000ba0 <HAL_InitTick>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08003a90 	.word	0x08003a90
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d121      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d11e      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca0:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e005      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d102      	bne.n	8001cea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	e004      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d134      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d003      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0xac>
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1a:	617b      	str	r3, [r7, #20]
      break;
 8001d1c:	e002      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	617b      	str	r3, [r7, #20]
      break;
 8001d22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	3301      	adds	r3, #1
 8001d30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	fb03 f202 	mul.w	r2, r3, r2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0e5b      	lsrs	r3, r3, #25
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	3301      	adds	r3, #1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d64:	69bb      	ldr	r3, [r7, #24]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08003aa8 	.word	0x08003aa8
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4904      	ldr	r1, [pc, #16]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08003aa0 	.word	0x08003aa0

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dcc:	f7ff ffda 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4904      	ldr	r1, [pc, #16]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08003aa0 	.word	0x08003aa0

08001df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e0c:	f7ff f9b6 	bl	800117c <HAL_PWREx_GetVoltageRange>
 8001e10:	6178      	str	r0, [r7, #20]
 8001e12:	e014      	b.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	4a24      	ldr	r2, [pc, #144]	; (8001eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e2c:	f7ff f9a6 	bl	800117c <HAL_PWREx_GetVoltageRange>
 8001e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	d10b      	bne.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d919      	bls.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e50:	d902      	bls.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e52:	2302      	movs	r3, #2
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e013      	b.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e58:	2301      	movs	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e010      	b.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d902      	bls.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e64:	2303      	movs	r3, #3
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e00a      	b.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d102      	bne.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e70:	2302      	movs	r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e004      	b.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b70      	cmp	r3, #112	; 0x70
 8001e7a:	d101      	bne.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 0207 	bic.w	r2, r3, #7
 8001e88:	4909      	ldr	r1, [pc, #36]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40022000 	.word	0x40022000

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d031      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ed8:	d01a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001eda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ede:	d814      	bhi.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ee8:	d10f      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001eea:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef6:	e00c      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3304      	adds	r3, #4
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fa22 	bl	8002348 <RCCEx_PLLSAI1_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f08:	e003      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0e:	e000      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f12:	7cfb      	ldrb	r3, [r7, #19]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f18:	4b51      	ldr	r3, [pc, #324]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	494e      	ldr	r1, [pc, #312]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f2e:	e001      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 809e 	beq.w	800207e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f56:	2300      	movs	r3, #0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	; 0x58
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f78:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a39      	ldr	r2, [pc, #228]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f84:	f7fe fe5c 	bl	8000c40 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7fe fe58 	bl	8000c40 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d902      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f9e:	e005      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ef      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d15a      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01e      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d019      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d016      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe fe18 	bl	8000c40 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	e00b      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7fe fe14 	bl	8000c40 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d902      	bls.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	74fb      	strb	r3, [r7, #19]
            break;
 800202a:	e006      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0ec      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800203a:	7cfb      	ldrb	r3, [r7, #19]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10b      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	4904      	ldr	r1, [pc, #16]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002056:	e009      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002058:	7cfb      	ldrb	r3, [r7, #19]
 800205a:	74bb      	strb	r3, [r7, #18]
 800205c:	e006      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800206c:	7c7b      	ldrb	r3, [r7, #17]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b8d      	ldr	r3, [pc, #564]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	4a8c      	ldr	r2, [pc, #560]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208a:	4b87      	ldr	r3, [pc, #540]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f023 0203 	bic.w	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4983      	ldr	r1, [pc, #524]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ac:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f023 020c 	bic.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	497b      	ldr	r1, [pc, #492]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	4972      	ldr	r1, [pc, #456]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	496a      	ldr	r1, [pc, #424]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	4961      	ldr	r1, [pc, #388]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002134:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4959      	ldr	r1, [pc, #356]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4950      	ldr	r1, [pc, #320]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002178:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002186:	4948      	ldr	r1, [pc, #288]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	493f      	ldr	r1, [pc, #252]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d028      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021bc:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ca:	4937      	ldr	r1, [pc, #220]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021da:	d106      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
 80021e8:	e011      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f2:	d10c      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	2101      	movs	r1, #1
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f8a4 	bl	8002348 <RCCEx_PLLSAI1_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d028      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	491f      	ldr	r1, [pc, #124]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002238:	d106      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002244:	60d3      	str	r3, [r2, #12]
 8002246:	e011      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002250:	d10c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f875 	bl	8002348 <RCCEx_PLLSAI1_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02b      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002296:	d109      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a02      	ldr	r2, [pc, #8]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a2:	60d3      	str	r3, [r2, #12]
 80022a4:	e014      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f843 	bl	8002348 <RCCEx_PLLSAI1_Config>
 80022c2:	4603      	mov	r3, r0
 80022c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01c      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	4916      	ldr	r1, [pc, #88]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022fa:	d10c      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f820 	bl	8002348 <RCCEx_PLLSAI1_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	4904      	ldr	r1, [pc, #16]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002338:	7cbb      	ldrb	r3, [r7, #18]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000

08002348 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002356:	4b74      	ldr	r3, [pc, #464]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d018      	beq.n	8002394 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002362:	4b71      	ldr	r3, [pc, #452]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d10d      	bne.n	800238e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
       ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800237a:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
       ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d047      	beq.n	800241e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e044      	b.n	800241e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d018      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x86>
 800239c:	2b03      	cmp	r3, #3
 800239e:	d825      	bhi.n	80023ec <RCCEx_PLLSAI1_Config+0xa4>
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d002      	beq.n	80023aa <RCCEx_PLLSAI1_Config+0x62>
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d009      	beq.n	80023bc <RCCEx_PLLSAI1_Config+0x74>
 80023a8:	e020      	b.n	80023ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11d      	bne.n	80023f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ba:	e01a      	b.n	80023f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023bc:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d116      	bne.n	80023f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023cc:	e013      	b.n	80023f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023ce:	4b56      	ldr	r3, [pc, #344]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023da:	4b53      	ldr	r3, [pc, #332]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ea:	e006      	b.n	80023fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e004      	b.n	80023fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023f2:	bf00      	nop
 80023f4:	e002      	b.n	80023fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	430b      	orrs	r3, r1
 8002418:	4943      	ldr	r1, [pc, #268]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d17c      	bne.n	800251e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800242e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002430:	f7fe fc06 	bl	8000c40 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002436:	e009      	b.n	800244c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002438:	f7fe fc02 	bl	8000c40 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d902      	bls.n	800244c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	73fb      	strb	r3, [r7, #15]
        break;
 800244a:	e005      	b.n	8002458 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ef      	bne.n	8002438 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15f      	bne.n	800251e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d110      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800246c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6892      	ldr	r2, [r2, #8]
 8002474:	0211      	lsls	r1, r2, #8
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	06d2      	lsls	r2, r2, #27
 800247c:	430a      	orrs	r2, r1
 800247e:	492a      	ldr	r1, [pc, #168]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	610b      	str	r3, [r1, #16]
 8002484:	e027      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d112      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800248c:	4b26      	ldr	r3, [pc, #152]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002494:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6892      	ldr	r2, [r2, #8]
 800249c:	0211      	lsls	r1, r2, #8
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6912      	ldr	r2, [r2, #16]
 80024a2:	0852      	lsrs	r2, r2, #1
 80024a4:	3a01      	subs	r2, #1
 80024a6:	0552      	lsls	r2, r2, #21
 80024a8:	430a      	orrs	r2, r1
 80024aa:	491f      	ldr	r1, [pc, #124]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	610b      	str	r3, [r1, #16]
 80024b0:	e011      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6892      	ldr	r2, [r2, #8]
 80024c2:	0211      	lsls	r1, r2, #8
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6952      	ldr	r2, [r2, #20]
 80024c8:	0852      	lsrs	r2, r2, #1
 80024ca:	3a01      	subs	r2, #1
 80024cc:	0652      	lsls	r2, r2, #25
 80024ce:	430a      	orrs	r2, r1
 80024d0:	4915      	ldr	r1, [pc, #84]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe fbad 	bl	8000c40 <HAL_GetTick>
 80024e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024e8:	e009      	b.n	80024fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ea:	f7fe fba9 	bl	8000c40 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d902      	bls.n	80024fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	73fb      	strb	r3, [r7, #15]
          break;
 80024fc:	e005      	b.n	800250a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0ef      	beq.n	80024ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4903      	ldr	r1, [pc, #12]	; (8002528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e049      	b.n	80025d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe f9ee 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f000 f882 	bl	8002674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d001      	beq.n	80025f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e033      	b.n	800265c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_TIM_Base_Start+0x8c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_TIM_Base_Start+0x3e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d004      	beq.n	800261a <HAL_TIM_Base_Start+0x3e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_TIM_Base_Start+0x90>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d115      	bne.n	8002646 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_TIM_Base_Start+0x94>)
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b06      	cmp	r3, #6
 800262a:	d015      	beq.n	8002658 <HAL_TIM_Base_Start+0x7c>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d011      	beq.n	8002658 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002644:	e008      	b.n	8002658 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e000      	b.n	800265a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40014000 	.word	0x40014000
 8002670:	00010007 	.word	0x00010007

08002674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <TIM_Base_SetConfig+0xbc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_Base_SetConfig+0x20>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002692:	d108      	bne.n	80026a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a21      	ldr	r2, [pc, #132]	; (8002730 <TIM_Base_SetConfig+0xbc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00b      	beq.n	80026c6 <TIM_Base_SetConfig+0x52>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b4:	d007      	beq.n	80026c6 <TIM_Base_SetConfig+0x52>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <TIM_Base_SetConfig+0xc0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d003      	beq.n	80026c6 <TIM_Base_SetConfig+0x52>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <TIM_Base_SetConfig+0xc4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d108      	bne.n	80026d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <TIM_Base_SetConfig+0xbc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <TIM_Base_SetConfig+0xa0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <TIM_Base_SetConfig+0xc0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0xa0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <TIM_Base_SetConfig+0xc4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40014000 	.word	0x40014000
 8002738:	40014400 	.word	0x40014400

0800273c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e040      	b.n	80027d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f908 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8c0 	bl	8002900 <UART_SetConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e022      	b.n	80027d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fb0e 	bl	8002db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fb95 	bl	8002ef8 <UART_CheckIdleState>
 80027ce:	4603      	mov	r3, r0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 8082 	bne.w	80028f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_UART_Transmit+0x26>
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07a      	b.n	80028f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_UART_Transmit+0x38>
 800280c:	2302      	movs	r3, #2
 800280e:	e073      	b.n	80028f8 <HAL_UART_Transmit+0x120>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2221      	movs	r2, #33	; 0x21
 8002824:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002826:	f7fe fa0b 	bl	8000c40 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x80>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002868:	e02d      	b.n	80028c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fb88 	bl	8002f8a <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e039      	b.n	80028f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002896:	b292      	uxth	r2, r2
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3302      	adds	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e008      	b.n	80028b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b292      	uxth	r2, r2
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1cb      	bne.n	800286a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fb54 	bl	8002f8a <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e005      	b.n	80028f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b08a      	sub	sp, #40	; 0x28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	4313      	orrs	r3, r2
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b9e      	ldr	r3, [pc, #632]	; (8002ba8 <UART_SetConfig+0x2a8>)
 8002930:	4013      	ands	r3, r2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002938:	430b      	orrs	r3, r1
 800293a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a93      	ldr	r2, [pc, #588]	; (8002bac <UART_SetConfig+0x2ac>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	4313      	orrs	r3, r2
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a8a      	ldr	r2, [pc, #552]	; (8002bb0 <UART_SetConfig+0x2b0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d126      	bne.n	80029d8 <UART_SetConfig+0xd8>
 800298a:	4b8a      	ldr	r3, [pc, #552]	; (8002bb4 <UART_SetConfig+0x2b4>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b03      	cmp	r3, #3
 8002996:	d81b      	bhi.n	80029d0 <UART_SetConfig+0xd0>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <UART_SetConfig+0xa0>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029c1 	.word	0x080029c1
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029c9 	.word	0x080029c9
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029b6:	e0ab      	b.n	8002b10 <UART_SetConfig+0x210>
 80029b8:	2302      	movs	r3, #2
 80029ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029be:	e0a7      	b.n	8002b10 <UART_SetConfig+0x210>
 80029c0:	2304      	movs	r3, #4
 80029c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029c6:	e0a3      	b.n	8002b10 <UART_SetConfig+0x210>
 80029c8:	2308      	movs	r3, #8
 80029ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ce:	e09f      	b.n	8002b10 <UART_SetConfig+0x210>
 80029d0:	2310      	movs	r3, #16
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029d6:	e09b      	b.n	8002b10 <UART_SetConfig+0x210>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a76      	ldr	r2, [pc, #472]	; (8002bb8 <UART_SetConfig+0x2b8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d138      	bne.n	8002a54 <UART_SetConfig+0x154>
 80029e2:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <UART_SetConfig+0x2b4>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d82d      	bhi.n	8002a4c <UART_SetConfig+0x14c>
 80029f0:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <UART_SetConfig+0xf8>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002a4d 	.word	0x08002a4d
 8002a00:	08002a4d 	.word	0x08002a4d
 8002a04:	08002a4d 	.word	0x08002a4d
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002a4d 	.word	0x08002a4d
 8002a10:	08002a4d 	.word	0x08002a4d
 8002a14:	08002a4d 	.word	0x08002a4d
 8002a18:	08002a35 	.word	0x08002a35
 8002a1c:	08002a4d 	.word	0x08002a4d
 8002a20:	08002a4d 	.word	0x08002a4d
 8002a24:	08002a4d 	.word	0x08002a4d
 8002a28:	08002a45 	.word	0x08002a45
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a32:	e06d      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a3a:	e069      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a42:	e065      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a44:	2308      	movs	r3, #8
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a4a:	e061      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a52:	e05d      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <UART_SetConfig+0x2bc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d125      	bne.n	8002aaa <UART_SetConfig+0x1aa>
 8002a5e:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <UART_SetConfig+0x2b4>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d016      	beq.n	8002a9a <UART_SetConfig+0x19a>
 8002a6c:	2b30      	cmp	r3, #48	; 0x30
 8002a6e:	d818      	bhi.n	8002aa2 <UART_SetConfig+0x1a2>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d00a      	beq.n	8002a8a <UART_SetConfig+0x18a>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d814      	bhi.n	8002aa2 <UART_SetConfig+0x1a2>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <UART_SetConfig+0x182>
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d008      	beq.n	8002a92 <UART_SetConfig+0x192>
 8002a80:	e00f      	b.n	8002aa2 <UART_SetConfig+0x1a2>
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a88:	e042      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a90:	e03e      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a92:	2304      	movs	r3, #4
 8002a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a98:	e03a      	b.n	8002b10 <UART_SetConfig+0x210>
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa0:	e036      	b.n	8002b10 <UART_SetConfig+0x210>
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aa8:	e032      	b.n	8002b10 <UART_SetConfig+0x210>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3f      	ldr	r2, [pc, #252]	; (8002bac <UART_SetConfig+0x2ac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d12a      	bne.n	8002b0a <UART_SetConfig+0x20a>
 8002ab4:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <UART_SetConfig+0x2b4>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ac2:	d01a      	beq.n	8002afa <UART_SetConfig+0x1fa>
 8002ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ac8:	d81b      	bhi.n	8002b02 <UART_SetConfig+0x202>
 8002aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ace:	d00c      	beq.n	8002aea <UART_SetConfig+0x1ea>
 8002ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad4:	d815      	bhi.n	8002b02 <UART_SetConfig+0x202>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <UART_SetConfig+0x1e2>
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ade:	d008      	beq.n	8002af2 <UART_SetConfig+0x1f2>
 8002ae0:	e00f      	b.n	8002b02 <UART_SetConfig+0x202>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ae8:	e012      	b.n	8002b10 <UART_SetConfig+0x210>
 8002aea:	2302      	movs	r3, #2
 8002aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002af0:	e00e      	b.n	8002b10 <UART_SetConfig+0x210>
 8002af2:	2304      	movs	r3, #4
 8002af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002af8:	e00a      	b.n	8002b10 <UART_SetConfig+0x210>
 8002afa:	2308      	movs	r3, #8
 8002afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b00:	e006      	b.n	8002b10 <UART_SetConfig+0x210>
 8002b02:	2310      	movs	r3, #16
 8002b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b08:	e002      	b.n	8002b10 <UART_SetConfig+0x210>
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a25      	ldr	r2, [pc, #148]	; (8002bac <UART_SetConfig+0x2ac>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	f040 808a 	bne.w	8002c30 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d824      	bhi.n	8002b6e <UART_SetConfig+0x26e>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x22c>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b51 	.word	0x08002b51
 8002b30:	08002b6f 	.word	0x08002b6f
 8002b34:	08002b59 	.word	0x08002b59
 8002b38:	08002b6f 	.word	0x08002b6f
 8002b3c:	08002b5f 	.word	0x08002b5f
 8002b40:	08002b6f 	.word	0x08002b6f
 8002b44:	08002b6f 	.word	0x08002b6f
 8002b48:	08002b6f 	.word	0x08002b6f
 8002b4c:	08002b67 	.word	0x08002b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7ff f924 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8002b54:	61f8      	str	r0, [r7, #28]
        break;
 8002b56:	e010      	b.n	8002b7a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <UART_SetConfig+0x2c0>)
 8002b5a:	61fb      	str	r3, [r7, #28]
        break;
 8002b5c:	e00d      	b.n	8002b7a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5e:	f7ff f885 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8002b62:	61f8      	str	r0, [r7, #28]
        break;
 8002b64:	e009      	b.n	8002b7a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6a:	61fb      	str	r3, [r7, #28]
        break;
 8002b6c:	e005      	b.n	8002b7a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8109 	beq.w	8002d94 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d305      	bcc.n	8002b9e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d912      	bls.n	8002bc4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ba4:	e0f6      	b.n	8002d94 <UART_SetConfig+0x494>
 8002ba6:	bf00      	nop
 8002ba8:	efff69f3 	.word	0xefff69f3
 8002bac:	40008000 	.word	0x40008000
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	40004800 	.word	0x40004800
 8002bc0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	461c      	mov	r4, r3
 8002bca:	4615      	mov	r5, r2
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	022b      	lsls	r3, r5, #8
 8002bd6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bda:	0222      	lsls	r2, r4, #8
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	6849      	ldr	r1, [r1, #4]
 8002be0:	0849      	lsrs	r1, r1, #1
 8002be2:	2000      	movs	r0, #0
 8002be4:	4688      	mov	r8, r1
 8002be6:	4681      	mov	r9, r0
 8002be8:	eb12 0a08 	adds.w	sl, r2, r8
 8002bec:	eb43 0b09 	adc.w	fp, r3, r9
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bfe:	4650      	mov	r0, sl
 8002c00:	4659      	mov	r1, fp
 8002c02:	f7fd fb3d 	bl	8000280 <__aeabi_uldivmod>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c14:	d308      	bcc.n	8002c28 <UART_SetConfig+0x328>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1c:	d204      	bcs.n	8002c28 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	e0b5      	b.n	8002d94 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c2e:	e0b1      	b.n	8002d94 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c38:	d15d      	bne.n	8002cf6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d827      	bhi.n	8002c92 <UART_SetConfig+0x392>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <UART_SetConfig+0x348>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002c93 	.word	0x08002c93
 8002c58:	08002c83 	.word	0x08002c83
 8002c5c:	08002c93 	.word	0x08002c93
 8002c60:	08002c93 	.word	0x08002c93
 8002c64:	08002c93 	.word	0x08002c93
 8002c68:	08002c8b 	.word	0x08002c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7ff f896 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8002c70:	61f8      	str	r0, [r7, #28]
        break;
 8002c72:	e014      	b.n	8002c9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c74:	f7ff f8a8 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002c78:	61f8      	str	r0, [r7, #28]
        break;
 8002c7a:	e010      	b.n	8002c9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c7c:	4b4c      	ldr	r3, [pc, #304]	; (8002db0 <UART_SetConfig+0x4b0>)
 8002c7e:	61fb      	str	r3, [r7, #28]
        break;
 8002c80:	e00d      	b.n	8002c9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c82:	f7fe fff3 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8002c86:	61f8      	str	r0, [r7, #28]
        break;
 8002c88:	e009      	b.n	8002c9e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8e:	61fb      	str	r3, [r7, #28]
        break;
 8002c90:	e005      	b.n	8002c9e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d077      	beq.n	8002d94 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005a      	lsls	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	441a      	add	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0f      	cmp	r3, #15
 8002cbe:	d916      	bls.n	8002cee <UART_SetConfig+0x3ee>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d212      	bcs.n	8002cee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f023 030f 	bic.w	r3, r3, #15
 8002cd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	8afb      	ldrh	r3, [r7, #22]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	8afa      	ldrh	r2, [r7, #22]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	e052      	b.n	8002d94 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cf4:	e04e      	b.n	8002d94 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d827      	bhi.n	8002d4e <UART_SetConfig+0x44e>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <UART_SetConfig+0x404>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d4f 	.word	0x08002d4f
 8002d14:	08002d3f 	.word	0x08002d3f
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
 8002d24:	08002d47 	.word	0x08002d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7ff f838 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8002d2c:	61f8      	str	r0, [r7, #28]
        break;
 8002d2e:	e014      	b.n	8002d5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff f84a 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002d34:	61f8      	str	r0, [r7, #28]
        break;
 8002d36:	e010      	b.n	8002d5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <UART_SetConfig+0x4b0>)
 8002d3a:	61fb      	str	r3, [r7, #28]
        break;
 8002d3c:	e00d      	b.n	8002d5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3e:	f7fe ff95 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8002d42:	61f8      	str	r0, [r7, #28]
        break;
 8002d44:	e009      	b.n	8002d5a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d4a:	61fb      	str	r3, [r7, #28]
        break;
 8002d4c:	e005      	b.n	8002d5a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d58:	bf00      	nop
    }

    if (pclk != 0U)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d019      	beq.n	8002d94 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	085a      	lsrs	r2, r3, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	441a      	add	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	d909      	bls.n	8002d8e <UART_SetConfig+0x48e>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d205      	bcs.n	8002d8e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	e002      	b.n	8002d94 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002da0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3728      	adds	r7, #40	; 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	00f42400 	.word	0x00f42400

08002db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01a      	beq.n	8002eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb2:	d10a      	bne.n	8002eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f08:	f7fd fe9a 	bl	8000c40 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d10e      	bne.n	8002f3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f82d 	bl	8002f8a <UART_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e023      	b.n	8002f82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d10e      	bne.n	8002f66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f817 	bl	8002f8a <UART_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e00d      	b.n	8002f82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b09c      	sub	sp, #112	; 0x70
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9a:	e0a5      	b.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	f000 80a1 	beq.w	80030e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fd fe4b 	bl	8000c40 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x32>
 8002fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13e      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e6      	bne.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	663b      	str	r3, [r7, #96]	; 0x60
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3308      	adds	r3, #8
 800300c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800300e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800301c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e5      	bne.n	8002fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e067      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d04f      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003056:	d147      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003060:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
 8003082:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e6      	bne.n	8003062 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3308      	adds	r3, #8
 800309a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	613b      	str	r3, [r7, #16]
   return(result);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030b4:	623a      	str	r2, [r7, #32]
 80030b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	69f9      	ldr	r1, [r7, #28]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e5      	bne.n	8003094 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e010      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	429a      	cmp	r2, r3
 8003104:	f43f af4a 	beq.w	8002f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3770      	adds	r7, #112	; 0x70
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <__errno>:
 8003114:	4b01      	ldr	r3, [pc, #4]	; (800311c <__errno+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	4d0d      	ldr	r5, [pc, #52]	; (8003158 <__libc_init_array+0x38>)
 8003124:	4c0d      	ldr	r4, [pc, #52]	; (800315c <__libc_init_array+0x3c>)
 8003126:	1b64      	subs	r4, r4, r5
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	2600      	movs	r6, #0
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	4d0b      	ldr	r5, [pc, #44]	; (8003160 <__libc_init_array+0x40>)
 8003132:	4c0c      	ldr	r4, [pc, #48]	; (8003164 <__libc_init_array+0x44>)
 8003134:	f000 fc8e 	bl	8003a54 <_init>
 8003138:	1b64      	subs	r4, r4, r5
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	2600      	movs	r6, #0
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	f855 3b04 	ldr.w	r3, [r5], #4
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	08003b14 	.word	0x08003b14
 800315c:	08003b14 	.word	0x08003b14
 8003160:	08003b14 	.word	0x08003b14
 8003164:	08003b18 	.word	0x08003b18

08003168 <memset>:
 8003168:	4402      	add	r2, r0
 800316a:	4603      	mov	r3, r0
 800316c:	4293      	cmp	r3, r2
 800316e:	d100      	bne.n	8003172 <memset+0xa>
 8003170:	4770      	bx	lr
 8003172:	f803 1b01 	strb.w	r1, [r3], #1
 8003176:	e7f9      	b.n	800316c <memset+0x4>

08003178 <siprintf>:
 8003178:	b40e      	push	{r1, r2, r3}
 800317a:	b500      	push	{lr}
 800317c:	b09c      	sub	sp, #112	; 0x70
 800317e:	ab1d      	add	r3, sp, #116	; 0x74
 8003180:	9002      	str	r0, [sp, #8]
 8003182:	9006      	str	r0, [sp, #24]
 8003184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003188:	4809      	ldr	r0, [pc, #36]	; (80031b0 <siprintf+0x38>)
 800318a:	9107      	str	r1, [sp, #28]
 800318c:	9104      	str	r1, [sp, #16]
 800318e:	4909      	ldr	r1, [pc, #36]	; (80031b4 <siprintf+0x3c>)
 8003190:	f853 2b04 	ldr.w	r2, [r3], #4
 8003194:	9105      	str	r1, [sp, #20]
 8003196:	6800      	ldr	r0, [r0, #0]
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	a902      	add	r1, sp, #8
 800319c:	f000 f868 	bl	8003270 <_svfiprintf_r>
 80031a0:	9b02      	ldr	r3, [sp, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	b01c      	add	sp, #112	; 0x70
 80031a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ac:	b003      	add	sp, #12
 80031ae:	4770      	bx	lr
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	ffff0208 	.word	0xffff0208

080031b8 <__ssputs_r>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	688e      	ldr	r6, [r1, #8]
 80031be:	429e      	cmp	r6, r3
 80031c0:	4682      	mov	sl, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	4690      	mov	r8, r2
 80031c6:	461f      	mov	r7, r3
 80031c8:	d838      	bhi.n	800323c <__ssputs_r+0x84>
 80031ca:	898a      	ldrh	r2, [r1, #12]
 80031cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d0:	d032      	beq.n	8003238 <__ssputs_r+0x80>
 80031d2:	6825      	ldr	r5, [r4, #0]
 80031d4:	6909      	ldr	r1, [r1, #16]
 80031d6:	eba5 0901 	sub.w	r9, r5, r1
 80031da:	6965      	ldr	r5, [r4, #20]
 80031dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031e4:	3301      	adds	r3, #1
 80031e6:	444b      	add	r3, r9
 80031e8:	106d      	asrs	r5, r5, #1
 80031ea:	429d      	cmp	r5, r3
 80031ec:	bf38      	it	cc
 80031ee:	461d      	movcc	r5, r3
 80031f0:	0553      	lsls	r3, r2, #21
 80031f2:	d531      	bpl.n	8003258 <__ssputs_r+0xa0>
 80031f4:	4629      	mov	r1, r5
 80031f6:	f000 fb63 	bl	80038c0 <_malloc_r>
 80031fa:	4606      	mov	r6, r0
 80031fc:	b950      	cbnz	r0, 8003214 <__ssputs_r+0x5c>
 80031fe:	230c      	movs	r3, #12
 8003200:	f8ca 3000 	str.w	r3, [sl]
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	6921      	ldr	r1, [r4, #16]
 8003216:	464a      	mov	r2, r9
 8003218:	f000 fabe 	bl	8003798 <memcpy>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	6126      	str	r6, [r4, #16]
 800322a:	6165      	str	r5, [r4, #20]
 800322c:	444e      	add	r6, r9
 800322e:	eba5 0509 	sub.w	r5, r5, r9
 8003232:	6026      	str	r6, [r4, #0]
 8003234:	60a5      	str	r5, [r4, #8]
 8003236:	463e      	mov	r6, r7
 8003238:	42be      	cmp	r6, r7
 800323a:	d900      	bls.n	800323e <__ssputs_r+0x86>
 800323c:	463e      	mov	r6, r7
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	4632      	mov	r2, r6
 8003242:	4641      	mov	r1, r8
 8003244:	f000 fab6 	bl	80037b4 <memmove>
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	1b9b      	subs	r3, r3, r6
 800324c:	60a3      	str	r3, [r4, #8]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	4433      	add	r3, r6
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	2000      	movs	r0, #0
 8003256:	e7db      	b.n	8003210 <__ssputs_r+0x58>
 8003258:	462a      	mov	r2, r5
 800325a:	f000 fba5 	bl	80039a8 <_realloc_r>
 800325e:	4606      	mov	r6, r0
 8003260:	2800      	cmp	r0, #0
 8003262:	d1e1      	bne.n	8003228 <__ssputs_r+0x70>
 8003264:	6921      	ldr	r1, [r4, #16]
 8003266:	4650      	mov	r0, sl
 8003268:	f000 fabe 	bl	80037e8 <_free_r>
 800326c:	e7c7      	b.n	80031fe <__ssputs_r+0x46>
	...

08003270 <_svfiprintf_r>:
 8003270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003274:	4698      	mov	r8, r3
 8003276:	898b      	ldrh	r3, [r1, #12]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	b09d      	sub	sp, #116	; 0x74
 800327c:	4607      	mov	r7, r0
 800327e:	460d      	mov	r5, r1
 8003280:	4614      	mov	r4, r2
 8003282:	d50e      	bpl.n	80032a2 <_svfiprintf_r+0x32>
 8003284:	690b      	ldr	r3, [r1, #16]
 8003286:	b963      	cbnz	r3, 80032a2 <_svfiprintf_r+0x32>
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	f000 fb19 	bl	80038c0 <_malloc_r>
 800328e:	6028      	str	r0, [r5, #0]
 8003290:	6128      	str	r0, [r5, #16]
 8003292:	b920      	cbnz	r0, 800329e <_svfiprintf_r+0x2e>
 8003294:	230c      	movs	r3, #12
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	e0d1      	b.n	8003442 <_svfiprintf_r+0x1d2>
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	616b      	str	r3, [r5, #20]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9309      	str	r3, [sp, #36]	; 0x24
 80032a6:	2320      	movs	r3, #32
 80032a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80032b0:	2330      	movs	r3, #48	; 0x30
 80032b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800345c <_svfiprintf_r+0x1ec>
 80032b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032ba:	f04f 0901 	mov.w	r9, #1
 80032be:	4623      	mov	r3, r4
 80032c0:	469a      	mov	sl, r3
 80032c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032c6:	b10a      	cbz	r2, 80032cc <_svfiprintf_r+0x5c>
 80032c8:	2a25      	cmp	r2, #37	; 0x25
 80032ca:	d1f9      	bne.n	80032c0 <_svfiprintf_r+0x50>
 80032cc:	ebba 0b04 	subs.w	fp, sl, r4
 80032d0:	d00b      	beq.n	80032ea <_svfiprintf_r+0x7a>
 80032d2:	465b      	mov	r3, fp
 80032d4:	4622      	mov	r2, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	4638      	mov	r0, r7
 80032da:	f7ff ff6d 	bl	80031b8 <__ssputs_r>
 80032de:	3001      	adds	r0, #1
 80032e0:	f000 80aa 	beq.w	8003438 <_svfiprintf_r+0x1c8>
 80032e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032e6:	445a      	add	r2, fp
 80032e8:	9209      	str	r2, [sp, #36]	; 0x24
 80032ea:	f89a 3000 	ldrb.w	r3, [sl]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80a2 	beq.w	8003438 <_svfiprintf_r+0x1c8>
 80032f4:	2300      	movs	r3, #0
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295
 80032fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032fe:	f10a 0a01 	add.w	sl, sl, #1
 8003302:	9304      	str	r3, [sp, #16]
 8003304:	9307      	str	r3, [sp, #28]
 8003306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800330a:	931a      	str	r3, [sp, #104]	; 0x68
 800330c:	4654      	mov	r4, sl
 800330e:	2205      	movs	r2, #5
 8003310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003314:	4851      	ldr	r0, [pc, #324]	; (800345c <_svfiprintf_r+0x1ec>)
 8003316:	f7fc ff63 	bl	80001e0 <memchr>
 800331a:	9a04      	ldr	r2, [sp, #16]
 800331c:	b9d8      	cbnz	r0, 8003356 <_svfiprintf_r+0xe6>
 800331e:	06d0      	lsls	r0, r2, #27
 8003320:	bf44      	itt	mi
 8003322:	2320      	movmi	r3, #32
 8003324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003328:	0711      	lsls	r1, r2, #28
 800332a:	bf44      	itt	mi
 800332c:	232b      	movmi	r3, #43	; 0x2b
 800332e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003332:	f89a 3000 	ldrb.w	r3, [sl]
 8003336:	2b2a      	cmp	r3, #42	; 0x2a
 8003338:	d015      	beq.n	8003366 <_svfiprintf_r+0xf6>
 800333a:	9a07      	ldr	r2, [sp, #28]
 800333c:	4654      	mov	r4, sl
 800333e:	2000      	movs	r0, #0
 8003340:	f04f 0c0a 	mov.w	ip, #10
 8003344:	4621      	mov	r1, r4
 8003346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800334a:	3b30      	subs	r3, #48	; 0x30
 800334c:	2b09      	cmp	r3, #9
 800334e:	d94e      	bls.n	80033ee <_svfiprintf_r+0x17e>
 8003350:	b1b0      	cbz	r0, 8003380 <_svfiprintf_r+0x110>
 8003352:	9207      	str	r2, [sp, #28]
 8003354:	e014      	b.n	8003380 <_svfiprintf_r+0x110>
 8003356:	eba0 0308 	sub.w	r3, r0, r8
 800335a:	fa09 f303 	lsl.w	r3, r9, r3
 800335e:	4313      	orrs	r3, r2
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	46a2      	mov	sl, r4
 8003364:	e7d2      	b.n	800330c <_svfiprintf_r+0x9c>
 8003366:	9b03      	ldr	r3, [sp, #12]
 8003368:	1d19      	adds	r1, r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	9103      	str	r1, [sp, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfbb      	ittet	lt
 8003372:	425b      	neglt	r3, r3
 8003374:	f042 0202 	orrlt.w	r2, r2, #2
 8003378:	9307      	strge	r3, [sp, #28]
 800337a:	9307      	strlt	r3, [sp, #28]
 800337c:	bfb8      	it	lt
 800337e:	9204      	strlt	r2, [sp, #16]
 8003380:	7823      	ldrb	r3, [r4, #0]
 8003382:	2b2e      	cmp	r3, #46	; 0x2e
 8003384:	d10c      	bne.n	80033a0 <_svfiprintf_r+0x130>
 8003386:	7863      	ldrb	r3, [r4, #1]
 8003388:	2b2a      	cmp	r3, #42	; 0x2a
 800338a:	d135      	bne.n	80033f8 <_svfiprintf_r+0x188>
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	1d1a      	adds	r2, r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	9203      	str	r2, [sp, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	bfb8      	it	lt
 8003398:	f04f 33ff 	movlt.w	r3, #4294967295
 800339c:	3402      	adds	r4, #2
 800339e:	9305      	str	r3, [sp, #20]
 80033a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800346c <_svfiprintf_r+0x1fc>
 80033a4:	7821      	ldrb	r1, [r4, #0]
 80033a6:	2203      	movs	r2, #3
 80033a8:	4650      	mov	r0, sl
 80033aa:	f7fc ff19 	bl	80001e0 <memchr>
 80033ae:	b140      	cbz	r0, 80033c2 <_svfiprintf_r+0x152>
 80033b0:	2340      	movs	r3, #64	; 0x40
 80033b2:	eba0 000a 	sub.w	r0, r0, sl
 80033b6:	fa03 f000 	lsl.w	r0, r3, r0
 80033ba:	9b04      	ldr	r3, [sp, #16]
 80033bc:	4303      	orrs	r3, r0
 80033be:	3401      	adds	r4, #1
 80033c0:	9304      	str	r3, [sp, #16]
 80033c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c6:	4826      	ldr	r0, [pc, #152]	; (8003460 <_svfiprintf_r+0x1f0>)
 80033c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033cc:	2206      	movs	r2, #6
 80033ce:	f7fc ff07 	bl	80001e0 <memchr>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d038      	beq.n	8003448 <_svfiprintf_r+0x1d8>
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <_svfiprintf_r+0x1f4>)
 80033d8:	bb1b      	cbnz	r3, 8003422 <_svfiprintf_r+0x1b2>
 80033da:	9b03      	ldr	r3, [sp, #12]
 80033dc:	3307      	adds	r3, #7
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	3308      	adds	r3, #8
 80033e4:	9303      	str	r3, [sp, #12]
 80033e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e8:	4433      	add	r3, r6
 80033ea:	9309      	str	r3, [sp, #36]	; 0x24
 80033ec:	e767      	b.n	80032be <_svfiprintf_r+0x4e>
 80033ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80033f2:	460c      	mov	r4, r1
 80033f4:	2001      	movs	r0, #1
 80033f6:	e7a5      	b.n	8003344 <_svfiprintf_r+0xd4>
 80033f8:	2300      	movs	r3, #0
 80033fa:	3401      	adds	r4, #1
 80033fc:	9305      	str	r3, [sp, #20]
 80033fe:	4619      	mov	r1, r3
 8003400:	f04f 0c0a 	mov.w	ip, #10
 8003404:	4620      	mov	r0, r4
 8003406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800340a:	3a30      	subs	r2, #48	; 0x30
 800340c:	2a09      	cmp	r2, #9
 800340e:	d903      	bls.n	8003418 <_svfiprintf_r+0x1a8>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0c5      	beq.n	80033a0 <_svfiprintf_r+0x130>
 8003414:	9105      	str	r1, [sp, #20]
 8003416:	e7c3      	b.n	80033a0 <_svfiprintf_r+0x130>
 8003418:	fb0c 2101 	mla	r1, ip, r1, r2
 800341c:	4604      	mov	r4, r0
 800341e:	2301      	movs	r3, #1
 8003420:	e7f0      	b.n	8003404 <_svfiprintf_r+0x194>
 8003422:	ab03      	add	r3, sp, #12
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	462a      	mov	r2, r5
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <_svfiprintf_r+0x1f8>)
 800342a:	a904      	add	r1, sp, #16
 800342c:	4638      	mov	r0, r7
 800342e:	f3af 8000 	nop.w
 8003432:	1c42      	adds	r2, r0, #1
 8003434:	4606      	mov	r6, r0
 8003436:	d1d6      	bne.n	80033e6 <_svfiprintf_r+0x176>
 8003438:	89ab      	ldrh	r3, [r5, #12]
 800343a:	065b      	lsls	r3, r3, #25
 800343c:	f53f af2c 	bmi.w	8003298 <_svfiprintf_r+0x28>
 8003440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003442:	b01d      	add	sp, #116	; 0x74
 8003444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003448:	ab03      	add	r3, sp, #12
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	462a      	mov	r2, r5
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <_svfiprintf_r+0x1f8>)
 8003450:	a904      	add	r1, sp, #16
 8003452:	4638      	mov	r0, r7
 8003454:	f000 f87a 	bl	800354c <_printf_i>
 8003458:	e7eb      	b.n	8003432 <_svfiprintf_r+0x1c2>
 800345a:	bf00      	nop
 800345c:	08003ad8 	.word	0x08003ad8
 8003460:	08003ae2 	.word	0x08003ae2
 8003464:	00000000 	.word	0x00000000
 8003468:	080031b9 	.word	0x080031b9
 800346c:	08003ade 	.word	0x08003ade

08003470 <_printf_common>:
 8003470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003474:	4616      	mov	r6, r2
 8003476:	4699      	mov	r9, r3
 8003478:	688a      	ldr	r2, [r1, #8]
 800347a:	690b      	ldr	r3, [r1, #16]
 800347c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003480:	4293      	cmp	r3, r2
 8003482:	bfb8      	it	lt
 8003484:	4613      	movlt	r3, r2
 8003486:	6033      	str	r3, [r6, #0]
 8003488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800348c:	4607      	mov	r7, r0
 800348e:	460c      	mov	r4, r1
 8003490:	b10a      	cbz	r2, 8003496 <_printf_common+0x26>
 8003492:	3301      	adds	r3, #1
 8003494:	6033      	str	r3, [r6, #0]
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	0699      	lsls	r1, r3, #26
 800349a:	bf42      	ittt	mi
 800349c:	6833      	ldrmi	r3, [r6, #0]
 800349e:	3302      	addmi	r3, #2
 80034a0:	6033      	strmi	r3, [r6, #0]
 80034a2:	6825      	ldr	r5, [r4, #0]
 80034a4:	f015 0506 	ands.w	r5, r5, #6
 80034a8:	d106      	bne.n	80034b8 <_printf_common+0x48>
 80034aa:	f104 0a19 	add.w	sl, r4, #25
 80034ae:	68e3      	ldr	r3, [r4, #12]
 80034b0:	6832      	ldr	r2, [r6, #0]
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	42ab      	cmp	r3, r5
 80034b6:	dc26      	bgt.n	8003506 <_printf_common+0x96>
 80034b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034bc:	1e13      	subs	r3, r2, #0
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	bf18      	it	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	0692      	lsls	r2, r2, #26
 80034c6:	d42b      	bmi.n	8003520 <_printf_common+0xb0>
 80034c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034cc:	4649      	mov	r1, r9
 80034ce:	4638      	mov	r0, r7
 80034d0:	47c0      	blx	r8
 80034d2:	3001      	adds	r0, #1
 80034d4:	d01e      	beq.n	8003514 <_printf_common+0xa4>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	68e5      	ldr	r5, [r4, #12]
 80034da:	6832      	ldr	r2, [r6, #0]
 80034dc:	f003 0306 	and.w	r3, r3, #6
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	bf08      	it	eq
 80034e4:	1aad      	subeq	r5, r5, r2
 80034e6:	68a3      	ldr	r3, [r4, #8]
 80034e8:	6922      	ldr	r2, [r4, #16]
 80034ea:	bf0c      	ite	eq
 80034ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034f0:	2500      	movne	r5, #0
 80034f2:	4293      	cmp	r3, r2
 80034f4:	bfc4      	itt	gt
 80034f6:	1a9b      	subgt	r3, r3, r2
 80034f8:	18ed      	addgt	r5, r5, r3
 80034fa:	2600      	movs	r6, #0
 80034fc:	341a      	adds	r4, #26
 80034fe:	42b5      	cmp	r5, r6
 8003500:	d11a      	bne.n	8003538 <_printf_common+0xc8>
 8003502:	2000      	movs	r0, #0
 8003504:	e008      	b.n	8003518 <_printf_common+0xa8>
 8003506:	2301      	movs	r3, #1
 8003508:	4652      	mov	r2, sl
 800350a:	4649      	mov	r1, r9
 800350c:	4638      	mov	r0, r7
 800350e:	47c0      	blx	r8
 8003510:	3001      	adds	r0, #1
 8003512:	d103      	bne.n	800351c <_printf_common+0xac>
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	3501      	adds	r5, #1
 800351e:	e7c6      	b.n	80034ae <_printf_common+0x3e>
 8003520:	18e1      	adds	r1, r4, r3
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	2030      	movs	r0, #48	; 0x30
 8003526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800352a:	4422      	add	r2, r4
 800352c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003534:	3302      	adds	r3, #2
 8003536:	e7c7      	b.n	80034c8 <_printf_common+0x58>
 8003538:	2301      	movs	r3, #1
 800353a:	4622      	mov	r2, r4
 800353c:	4649      	mov	r1, r9
 800353e:	4638      	mov	r0, r7
 8003540:	47c0      	blx	r8
 8003542:	3001      	adds	r0, #1
 8003544:	d0e6      	beq.n	8003514 <_printf_common+0xa4>
 8003546:	3601      	adds	r6, #1
 8003548:	e7d9      	b.n	80034fe <_printf_common+0x8e>
	...

0800354c <_printf_i>:
 800354c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	7e0f      	ldrb	r7, [r1, #24]
 8003552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003554:	2f78      	cmp	r7, #120	; 0x78
 8003556:	4691      	mov	r9, r2
 8003558:	4680      	mov	r8, r0
 800355a:	460c      	mov	r4, r1
 800355c:	469a      	mov	sl, r3
 800355e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003562:	d807      	bhi.n	8003574 <_printf_i+0x28>
 8003564:	2f62      	cmp	r7, #98	; 0x62
 8003566:	d80a      	bhi.n	800357e <_printf_i+0x32>
 8003568:	2f00      	cmp	r7, #0
 800356a:	f000 80d8 	beq.w	800371e <_printf_i+0x1d2>
 800356e:	2f58      	cmp	r7, #88	; 0x58
 8003570:	f000 80a3 	beq.w	80036ba <_printf_i+0x16e>
 8003574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800357c:	e03a      	b.n	80035f4 <_printf_i+0xa8>
 800357e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003582:	2b15      	cmp	r3, #21
 8003584:	d8f6      	bhi.n	8003574 <_printf_i+0x28>
 8003586:	a101      	add	r1, pc, #4	; (adr r1, 800358c <_printf_i+0x40>)
 8003588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800358c:	080035e5 	.word	0x080035e5
 8003590:	080035f9 	.word	0x080035f9
 8003594:	08003575 	.word	0x08003575
 8003598:	08003575 	.word	0x08003575
 800359c:	08003575 	.word	0x08003575
 80035a0:	08003575 	.word	0x08003575
 80035a4:	080035f9 	.word	0x080035f9
 80035a8:	08003575 	.word	0x08003575
 80035ac:	08003575 	.word	0x08003575
 80035b0:	08003575 	.word	0x08003575
 80035b4:	08003575 	.word	0x08003575
 80035b8:	08003705 	.word	0x08003705
 80035bc:	08003629 	.word	0x08003629
 80035c0:	080036e7 	.word	0x080036e7
 80035c4:	08003575 	.word	0x08003575
 80035c8:	08003575 	.word	0x08003575
 80035cc:	08003727 	.word	0x08003727
 80035d0:	08003575 	.word	0x08003575
 80035d4:	08003629 	.word	0x08003629
 80035d8:	08003575 	.word	0x08003575
 80035dc:	08003575 	.word	0x08003575
 80035e0:	080036ef 	.word	0x080036ef
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	602a      	str	r2, [r5, #0]
 80035ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0a3      	b.n	8003740 <_printf_i+0x1f4>
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	6829      	ldr	r1, [r5, #0]
 80035fc:	0606      	lsls	r6, r0, #24
 80035fe:	f101 0304 	add.w	r3, r1, #4
 8003602:	d50a      	bpl.n	800361a <_printf_i+0xce>
 8003604:	680e      	ldr	r6, [r1, #0]
 8003606:	602b      	str	r3, [r5, #0]
 8003608:	2e00      	cmp	r6, #0
 800360a:	da03      	bge.n	8003614 <_printf_i+0xc8>
 800360c:	232d      	movs	r3, #45	; 0x2d
 800360e:	4276      	negs	r6, r6
 8003610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003614:	485e      	ldr	r0, [pc, #376]	; (8003790 <_printf_i+0x244>)
 8003616:	230a      	movs	r3, #10
 8003618:	e019      	b.n	800364e <_printf_i+0x102>
 800361a:	680e      	ldr	r6, [r1, #0]
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003622:	bf18      	it	ne
 8003624:	b236      	sxthne	r6, r6
 8003626:	e7ef      	b.n	8003608 <_printf_i+0xbc>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	1d19      	adds	r1, r3, #4
 800362e:	6029      	str	r1, [r5, #0]
 8003630:	0601      	lsls	r1, r0, #24
 8003632:	d501      	bpl.n	8003638 <_printf_i+0xec>
 8003634:	681e      	ldr	r6, [r3, #0]
 8003636:	e002      	b.n	800363e <_printf_i+0xf2>
 8003638:	0646      	lsls	r6, r0, #25
 800363a:	d5fb      	bpl.n	8003634 <_printf_i+0xe8>
 800363c:	881e      	ldrh	r6, [r3, #0]
 800363e:	4854      	ldr	r0, [pc, #336]	; (8003790 <_printf_i+0x244>)
 8003640:	2f6f      	cmp	r7, #111	; 0x6f
 8003642:	bf0c      	ite	eq
 8003644:	2308      	moveq	r3, #8
 8003646:	230a      	movne	r3, #10
 8003648:	2100      	movs	r1, #0
 800364a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800364e:	6865      	ldr	r5, [r4, #4]
 8003650:	60a5      	str	r5, [r4, #8]
 8003652:	2d00      	cmp	r5, #0
 8003654:	bfa2      	ittt	ge
 8003656:	6821      	ldrge	r1, [r4, #0]
 8003658:	f021 0104 	bicge.w	r1, r1, #4
 800365c:	6021      	strge	r1, [r4, #0]
 800365e:	b90e      	cbnz	r6, 8003664 <_printf_i+0x118>
 8003660:	2d00      	cmp	r5, #0
 8003662:	d04d      	beq.n	8003700 <_printf_i+0x1b4>
 8003664:	4615      	mov	r5, r2
 8003666:	fbb6 f1f3 	udiv	r1, r6, r3
 800366a:	fb03 6711 	mls	r7, r3, r1, r6
 800366e:	5dc7      	ldrb	r7, [r0, r7]
 8003670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003674:	4637      	mov	r7, r6
 8003676:	42bb      	cmp	r3, r7
 8003678:	460e      	mov	r6, r1
 800367a:	d9f4      	bls.n	8003666 <_printf_i+0x11a>
 800367c:	2b08      	cmp	r3, #8
 800367e:	d10b      	bne.n	8003698 <_printf_i+0x14c>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	07de      	lsls	r6, r3, #31
 8003684:	d508      	bpl.n	8003698 <_printf_i+0x14c>
 8003686:	6923      	ldr	r3, [r4, #16]
 8003688:	6861      	ldr	r1, [r4, #4]
 800368a:	4299      	cmp	r1, r3
 800368c:	bfde      	ittt	le
 800368e:	2330      	movle	r3, #48	; 0x30
 8003690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003698:	1b52      	subs	r2, r2, r5
 800369a:	6122      	str	r2, [r4, #16]
 800369c:	f8cd a000 	str.w	sl, [sp]
 80036a0:	464b      	mov	r3, r9
 80036a2:	aa03      	add	r2, sp, #12
 80036a4:	4621      	mov	r1, r4
 80036a6:	4640      	mov	r0, r8
 80036a8:	f7ff fee2 	bl	8003470 <_printf_common>
 80036ac:	3001      	adds	r0, #1
 80036ae:	d14c      	bne.n	800374a <_printf_i+0x1fe>
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	b004      	add	sp, #16
 80036b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ba:	4835      	ldr	r0, [pc, #212]	; (8003790 <_printf_i+0x244>)
 80036bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036c0:	6829      	ldr	r1, [r5, #0]
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80036c8:	6029      	str	r1, [r5, #0]
 80036ca:	061d      	lsls	r5, r3, #24
 80036cc:	d514      	bpl.n	80036f8 <_printf_i+0x1ac>
 80036ce:	07df      	lsls	r7, r3, #31
 80036d0:	bf44      	itt	mi
 80036d2:	f043 0320 	orrmi.w	r3, r3, #32
 80036d6:	6023      	strmi	r3, [r4, #0]
 80036d8:	b91e      	cbnz	r6, 80036e2 <_printf_i+0x196>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	f023 0320 	bic.w	r3, r3, #32
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	2310      	movs	r3, #16
 80036e4:	e7b0      	b.n	8003648 <_printf_i+0xfc>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	f043 0320 	orr.w	r3, r3, #32
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	2378      	movs	r3, #120	; 0x78
 80036f0:	4828      	ldr	r0, [pc, #160]	; (8003794 <_printf_i+0x248>)
 80036f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036f6:	e7e3      	b.n	80036c0 <_printf_i+0x174>
 80036f8:	0659      	lsls	r1, r3, #25
 80036fa:	bf48      	it	mi
 80036fc:	b2b6      	uxthmi	r6, r6
 80036fe:	e7e6      	b.n	80036ce <_printf_i+0x182>
 8003700:	4615      	mov	r5, r2
 8003702:	e7bb      	b.n	800367c <_printf_i+0x130>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	6826      	ldr	r6, [r4, #0]
 8003708:	6961      	ldr	r1, [r4, #20]
 800370a:	1d18      	adds	r0, r3, #4
 800370c:	6028      	str	r0, [r5, #0]
 800370e:	0635      	lsls	r5, r6, #24
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	d501      	bpl.n	8003718 <_printf_i+0x1cc>
 8003714:	6019      	str	r1, [r3, #0]
 8003716:	e002      	b.n	800371e <_printf_i+0x1d2>
 8003718:	0670      	lsls	r0, r6, #25
 800371a:	d5fb      	bpl.n	8003714 <_printf_i+0x1c8>
 800371c:	8019      	strh	r1, [r3, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	6123      	str	r3, [r4, #16]
 8003722:	4615      	mov	r5, r2
 8003724:	e7ba      	b.n	800369c <_printf_i+0x150>
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	602a      	str	r2, [r5, #0]
 800372c:	681d      	ldr	r5, [r3, #0]
 800372e:	6862      	ldr	r2, [r4, #4]
 8003730:	2100      	movs	r1, #0
 8003732:	4628      	mov	r0, r5
 8003734:	f7fc fd54 	bl	80001e0 <memchr>
 8003738:	b108      	cbz	r0, 800373e <_printf_i+0x1f2>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	6060      	str	r0, [r4, #4]
 800373e:	6863      	ldr	r3, [r4, #4]
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	2300      	movs	r3, #0
 8003744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003748:	e7a8      	b.n	800369c <_printf_i+0x150>
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	462a      	mov	r2, r5
 800374e:	4649      	mov	r1, r9
 8003750:	4640      	mov	r0, r8
 8003752:	47d0      	blx	sl
 8003754:	3001      	adds	r0, #1
 8003756:	d0ab      	beq.n	80036b0 <_printf_i+0x164>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	079b      	lsls	r3, r3, #30
 800375c:	d413      	bmi.n	8003786 <_printf_i+0x23a>
 800375e:	68e0      	ldr	r0, [r4, #12]
 8003760:	9b03      	ldr	r3, [sp, #12]
 8003762:	4298      	cmp	r0, r3
 8003764:	bfb8      	it	lt
 8003766:	4618      	movlt	r0, r3
 8003768:	e7a4      	b.n	80036b4 <_printf_i+0x168>
 800376a:	2301      	movs	r3, #1
 800376c:	4632      	mov	r2, r6
 800376e:	4649      	mov	r1, r9
 8003770:	4640      	mov	r0, r8
 8003772:	47d0      	blx	sl
 8003774:	3001      	adds	r0, #1
 8003776:	d09b      	beq.n	80036b0 <_printf_i+0x164>
 8003778:	3501      	adds	r5, #1
 800377a:	68e3      	ldr	r3, [r4, #12]
 800377c:	9903      	ldr	r1, [sp, #12]
 800377e:	1a5b      	subs	r3, r3, r1
 8003780:	42ab      	cmp	r3, r5
 8003782:	dcf2      	bgt.n	800376a <_printf_i+0x21e>
 8003784:	e7eb      	b.n	800375e <_printf_i+0x212>
 8003786:	2500      	movs	r5, #0
 8003788:	f104 0619 	add.w	r6, r4, #25
 800378c:	e7f5      	b.n	800377a <_printf_i+0x22e>
 800378e:	bf00      	nop
 8003790:	08003ae9 	.word	0x08003ae9
 8003794:	08003afa 	.word	0x08003afa

08003798 <memcpy>:
 8003798:	440a      	add	r2, r1
 800379a:	4291      	cmp	r1, r2
 800379c:	f100 33ff 	add.w	r3, r0, #4294967295
 80037a0:	d100      	bne.n	80037a4 <memcpy+0xc>
 80037a2:	4770      	bx	lr
 80037a4:	b510      	push	{r4, lr}
 80037a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ae:	4291      	cmp	r1, r2
 80037b0:	d1f9      	bne.n	80037a6 <memcpy+0xe>
 80037b2:	bd10      	pop	{r4, pc}

080037b4 <memmove>:
 80037b4:	4288      	cmp	r0, r1
 80037b6:	b510      	push	{r4, lr}
 80037b8:	eb01 0402 	add.w	r4, r1, r2
 80037bc:	d902      	bls.n	80037c4 <memmove+0x10>
 80037be:	4284      	cmp	r4, r0
 80037c0:	4623      	mov	r3, r4
 80037c2:	d807      	bhi.n	80037d4 <memmove+0x20>
 80037c4:	1e43      	subs	r3, r0, #1
 80037c6:	42a1      	cmp	r1, r4
 80037c8:	d008      	beq.n	80037dc <memmove+0x28>
 80037ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037d2:	e7f8      	b.n	80037c6 <memmove+0x12>
 80037d4:	4402      	add	r2, r0
 80037d6:	4601      	mov	r1, r0
 80037d8:	428a      	cmp	r2, r1
 80037da:	d100      	bne.n	80037de <memmove+0x2a>
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037e6:	e7f7      	b.n	80037d8 <memmove+0x24>

080037e8 <_free_r>:
 80037e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037ea:	2900      	cmp	r1, #0
 80037ec:	d044      	beq.n	8003878 <_free_r+0x90>
 80037ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037f2:	9001      	str	r0, [sp, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f1a1 0404 	sub.w	r4, r1, #4
 80037fa:	bfb8      	it	lt
 80037fc:	18e4      	addlt	r4, r4, r3
 80037fe:	f000 f913 	bl	8003a28 <__malloc_lock>
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <_free_r+0x94>)
 8003804:	9801      	ldr	r0, [sp, #4]
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	b933      	cbnz	r3, 8003818 <_free_r+0x30>
 800380a:	6063      	str	r3, [r4, #4]
 800380c:	6014      	str	r4, [r2, #0]
 800380e:	b003      	add	sp, #12
 8003810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003814:	f000 b90e 	b.w	8003a34 <__malloc_unlock>
 8003818:	42a3      	cmp	r3, r4
 800381a:	d908      	bls.n	800382e <_free_r+0x46>
 800381c:	6825      	ldr	r5, [r4, #0]
 800381e:	1961      	adds	r1, r4, r5
 8003820:	428b      	cmp	r3, r1
 8003822:	bf01      	itttt	eq
 8003824:	6819      	ldreq	r1, [r3, #0]
 8003826:	685b      	ldreq	r3, [r3, #4]
 8003828:	1949      	addeq	r1, r1, r5
 800382a:	6021      	streq	r1, [r4, #0]
 800382c:	e7ed      	b.n	800380a <_free_r+0x22>
 800382e:	461a      	mov	r2, r3
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	b10b      	cbz	r3, 8003838 <_free_r+0x50>
 8003834:	42a3      	cmp	r3, r4
 8003836:	d9fa      	bls.n	800382e <_free_r+0x46>
 8003838:	6811      	ldr	r1, [r2, #0]
 800383a:	1855      	adds	r5, r2, r1
 800383c:	42a5      	cmp	r5, r4
 800383e:	d10b      	bne.n	8003858 <_free_r+0x70>
 8003840:	6824      	ldr	r4, [r4, #0]
 8003842:	4421      	add	r1, r4
 8003844:	1854      	adds	r4, r2, r1
 8003846:	42a3      	cmp	r3, r4
 8003848:	6011      	str	r1, [r2, #0]
 800384a:	d1e0      	bne.n	800380e <_free_r+0x26>
 800384c:	681c      	ldr	r4, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	6053      	str	r3, [r2, #4]
 8003852:	4421      	add	r1, r4
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	e7da      	b.n	800380e <_free_r+0x26>
 8003858:	d902      	bls.n	8003860 <_free_r+0x78>
 800385a:	230c      	movs	r3, #12
 800385c:	6003      	str	r3, [r0, #0]
 800385e:	e7d6      	b.n	800380e <_free_r+0x26>
 8003860:	6825      	ldr	r5, [r4, #0]
 8003862:	1961      	adds	r1, r4, r5
 8003864:	428b      	cmp	r3, r1
 8003866:	bf04      	itt	eq
 8003868:	6819      	ldreq	r1, [r3, #0]
 800386a:	685b      	ldreq	r3, [r3, #4]
 800386c:	6063      	str	r3, [r4, #4]
 800386e:	bf04      	itt	eq
 8003870:	1949      	addeq	r1, r1, r5
 8003872:	6021      	streq	r1, [r4, #0]
 8003874:	6054      	str	r4, [r2, #4]
 8003876:	e7ca      	b.n	800380e <_free_r+0x26>
 8003878:	b003      	add	sp, #12
 800387a:	bd30      	pop	{r4, r5, pc}
 800387c:	20000164 	.word	0x20000164

08003880 <sbrk_aligned>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4e0e      	ldr	r6, [pc, #56]	; (80038bc <sbrk_aligned+0x3c>)
 8003884:	460c      	mov	r4, r1
 8003886:	6831      	ldr	r1, [r6, #0]
 8003888:	4605      	mov	r5, r0
 800388a:	b911      	cbnz	r1, 8003892 <sbrk_aligned+0x12>
 800388c:	f000 f8bc 	bl	8003a08 <_sbrk_r>
 8003890:	6030      	str	r0, [r6, #0]
 8003892:	4621      	mov	r1, r4
 8003894:	4628      	mov	r0, r5
 8003896:	f000 f8b7 	bl	8003a08 <_sbrk_r>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	d00a      	beq.n	80038b4 <sbrk_aligned+0x34>
 800389e:	1cc4      	adds	r4, r0, #3
 80038a0:	f024 0403 	bic.w	r4, r4, #3
 80038a4:	42a0      	cmp	r0, r4
 80038a6:	d007      	beq.n	80038b8 <sbrk_aligned+0x38>
 80038a8:	1a21      	subs	r1, r4, r0
 80038aa:	4628      	mov	r0, r5
 80038ac:	f000 f8ac 	bl	8003a08 <_sbrk_r>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d101      	bne.n	80038b8 <sbrk_aligned+0x38>
 80038b4:	f04f 34ff 	mov.w	r4, #4294967295
 80038b8:	4620      	mov	r0, r4
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	20000168 	.word	0x20000168

080038c0 <_malloc_r>:
 80038c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c4:	1ccd      	adds	r5, r1, #3
 80038c6:	f025 0503 	bic.w	r5, r5, #3
 80038ca:	3508      	adds	r5, #8
 80038cc:	2d0c      	cmp	r5, #12
 80038ce:	bf38      	it	cc
 80038d0:	250c      	movcc	r5, #12
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	4607      	mov	r7, r0
 80038d6:	db01      	blt.n	80038dc <_malloc_r+0x1c>
 80038d8:	42a9      	cmp	r1, r5
 80038da:	d905      	bls.n	80038e8 <_malloc_r+0x28>
 80038dc:	230c      	movs	r3, #12
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	2600      	movs	r6, #0
 80038e2:	4630      	mov	r0, r6
 80038e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e8:	4e2e      	ldr	r6, [pc, #184]	; (80039a4 <_malloc_r+0xe4>)
 80038ea:	f000 f89d 	bl	8003a28 <__malloc_lock>
 80038ee:	6833      	ldr	r3, [r6, #0]
 80038f0:	461c      	mov	r4, r3
 80038f2:	bb34      	cbnz	r4, 8003942 <_malloc_r+0x82>
 80038f4:	4629      	mov	r1, r5
 80038f6:	4638      	mov	r0, r7
 80038f8:	f7ff ffc2 	bl	8003880 <sbrk_aligned>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	4604      	mov	r4, r0
 8003900:	d14d      	bne.n	800399e <_malloc_r+0xde>
 8003902:	6834      	ldr	r4, [r6, #0]
 8003904:	4626      	mov	r6, r4
 8003906:	2e00      	cmp	r6, #0
 8003908:	d140      	bne.n	800398c <_malloc_r+0xcc>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	4631      	mov	r1, r6
 800390e:	4638      	mov	r0, r7
 8003910:	eb04 0803 	add.w	r8, r4, r3
 8003914:	f000 f878 	bl	8003a08 <_sbrk_r>
 8003918:	4580      	cmp	r8, r0
 800391a:	d13a      	bne.n	8003992 <_malloc_r+0xd2>
 800391c:	6821      	ldr	r1, [r4, #0]
 800391e:	3503      	adds	r5, #3
 8003920:	1a6d      	subs	r5, r5, r1
 8003922:	f025 0503 	bic.w	r5, r5, #3
 8003926:	3508      	adds	r5, #8
 8003928:	2d0c      	cmp	r5, #12
 800392a:	bf38      	it	cc
 800392c:	250c      	movcc	r5, #12
 800392e:	4629      	mov	r1, r5
 8003930:	4638      	mov	r0, r7
 8003932:	f7ff ffa5 	bl	8003880 <sbrk_aligned>
 8003936:	3001      	adds	r0, #1
 8003938:	d02b      	beq.n	8003992 <_malloc_r+0xd2>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	442b      	add	r3, r5
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	e00e      	b.n	8003960 <_malloc_r+0xa0>
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	1b52      	subs	r2, r2, r5
 8003946:	d41e      	bmi.n	8003986 <_malloc_r+0xc6>
 8003948:	2a0b      	cmp	r2, #11
 800394a:	d916      	bls.n	800397a <_malloc_r+0xba>
 800394c:	1961      	adds	r1, r4, r5
 800394e:	42a3      	cmp	r3, r4
 8003950:	6025      	str	r5, [r4, #0]
 8003952:	bf18      	it	ne
 8003954:	6059      	strne	r1, [r3, #4]
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	bf08      	it	eq
 800395a:	6031      	streq	r1, [r6, #0]
 800395c:	5162      	str	r2, [r4, r5]
 800395e:	604b      	str	r3, [r1, #4]
 8003960:	4638      	mov	r0, r7
 8003962:	f104 060b 	add.w	r6, r4, #11
 8003966:	f000 f865 	bl	8003a34 <__malloc_unlock>
 800396a:	f026 0607 	bic.w	r6, r6, #7
 800396e:	1d23      	adds	r3, r4, #4
 8003970:	1af2      	subs	r2, r6, r3
 8003972:	d0b6      	beq.n	80038e2 <_malloc_r+0x22>
 8003974:	1b9b      	subs	r3, r3, r6
 8003976:	50a3      	str	r3, [r4, r2]
 8003978:	e7b3      	b.n	80038e2 <_malloc_r+0x22>
 800397a:	6862      	ldr	r2, [r4, #4]
 800397c:	42a3      	cmp	r3, r4
 800397e:	bf0c      	ite	eq
 8003980:	6032      	streq	r2, [r6, #0]
 8003982:	605a      	strne	r2, [r3, #4]
 8003984:	e7ec      	b.n	8003960 <_malloc_r+0xa0>
 8003986:	4623      	mov	r3, r4
 8003988:	6864      	ldr	r4, [r4, #4]
 800398a:	e7b2      	b.n	80038f2 <_malloc_r+0x32>
 800398c:	4634      	mov	r4, r6
 800398e:	6876      	ldr	r6, [r6, #4]
 8003990:	e7b9      	b.n	8003906 <_malloc_r+0x46>
 8003992:	230c      	movs	r3, #12
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4638      	mov	r0, r7
 8003998:	f000 f84c 	bl	8003a34 <__malloc_unlock>
 800399c:	e7a1      	b.n	80038e2 <_malloc_r+0x22>
 800399e:	6025      	str	r5, [r4, #0]
 80039a0:	e7de      	b.n	8003960 <_malloc_r+0xa0>
 80039a2:	bf00      	nop
 80039a4:	20000164 	.word	0x20000164

080039a8 <_realloc_r>:
 80039a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ac:	4680      	mov	r8, r0
 80039ae:	4614      	mov	r4, r2
 80039b0:	460e      	mov	r6, r1
 80039b2:	b921      	cbnz	r1, 80039be <_realloc_r+0x16>
 80039b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	4611      	mov	r1, r2
 80039ba:	f7ff bf81 	b.w	80038c0 <_malloc_r>
 80039be:	b92a      	cbnz	r2, 80039cc <_realloc_r+0x24>
 80039c0:	f7ff ff12 	bl	80037e8 <_free_r>
 80039c4:	4625      	mov	r5, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039cc:	f000 f838 	bl	8003a40 <_malloc_usable_size_r>
 80039d0:	4284      	cmp	r4, r0
 80039d2:	4607      	mov	r7, r0
 80039d4:	d802      	bhi.n	80039dc <_realloc_r+0x34>
 80039d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039da:	d812      	bhi.n	8003a02 <_realloc_r+0x5a>
 80039dc:	4621      	mov	r1, r4
 80039de:	4640      	mov	r0, r8
 80039e0:	f7ff ff6e 	bl	80038c0 <_malloc_r>
 80039e4:	4605      	mov	r5, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d0ed      	beq.n	80039c6 <_realloc_r+0x1e>
 80039ea:	42bc      	cmp	r4, r7
 80039ec:	4622      	mov	r2, r4
 80039ee:	4631      	mov	r1, r6
 80039f0:	bf28      	it	cs
 80039f2:	463a      	movcs	r2, r7
 80039f4:	f7ff fed0 	bl	8003798 <memcpy>
 80039f8:	4631      	mov	r1, r6
 80039fa:	4640      	mov	r0, r8
 80039fc:	f7ff fef4 	bl	80037e8 <_free_r>
 8003a00:	e7e1      	b.n	80039c6 <_realloc_r+0x1e>
 8003a02:	4635      	mov	r5, r6
 8003a04:	e7df      	b.n	80039c6 <_realloc_r+0x1e>
	...

08003a08 <_sbrk_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4d06      	ldr	r5, [pc, #24]	; (8003a24 <_sbrk_r+0x1c>)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4604      	mov	r4, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	f7fd f832 	bl	8000a7c <_sbrk>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_sbrk_r+0x1a>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_sbrk_r+0x1a>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	2000016c 	.word	0x2000016c

08003a28 <__malloc_lock>:
 8003a28:	4801      	ldr	r0, [pc, #4]	; (8003a30 <__malloc_lock+0x8>)
 8003a2a:	f000 b811 	b.w	8003a50 <__retarget_lock_acquire_recursive>
 8003a2e:	bf00      	nop
 8003a30:	20000170 	.word	0x20000170

08003a34 <__malloc_unlock>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__malloc_unlock+0x8>)
 8003a36:	f000 b80c 	b.w	8003a52 <__retarget_lock_release_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	20000170 	.word	0x20000170

08003a40 <_malloc_usable_size_r>:
 8003a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a44:	1f18      	subs	r0, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bfbc      	itt	lt
 8003a4a:	580b      	ldrlt	r3, [r1, r0]
 8003a4c:	18c0      	addlt	r0, r0, r3
 8003a4e:	4770      	bx	lr

08003a50 <__retarget_lock_acquire_recursive>:
 8003a50:	4770      	bx	lr

08003a52 <__retarget_lock_release_recursive>:
 8003a52:	4770      	bx	lr

08003a54 <_init>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr

08003a60 <_fini>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr
